// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../config.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 5159862772342561879),
      name: 'Api',
      lastPropertyId: const obx_int.IdUid(6, 4368209173055600208),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2997921667894422291),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3309462228560676299),
            name: 'name',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(1, 2195850094439964976)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8755228808218806165),
            name: 'url',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8182041317473480429),
            name: 'key',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4827309923050169710),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4368209173055600208),
            name: 'models',
            type: 30,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 1471252532006706842),
      name: 'Bot',
      lastPropertyId: const obx_int.IdUid(6, 1298185398955275388),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2364097877047185363),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8619370723574490118),
            name: 'name',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(2, 7435114004808121384)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8133177946877353053),
            name: 'stream',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4803744988919796585),
            name: 'maxTokens',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4977694286073727329),
            name: 'temperature',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1298185398955275388),
            name: 'systemPrompts',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 5444855688434910302),
      name: 'Chat',
      lastPropertyId: const obx_int.IdUid(4, 7785727273704394352),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1147510379973621264),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2908162376476308280),
            name: 'core',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4874093300014296547),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7785727273704394352),
            name: 'time',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 3477884625159293459),
      name: 'Model',
      lastPropertyId: const obx_int.IdUid(4, 8924721507289376554),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1614436098327889188),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5527390429831254032),
            name: 'mid',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(3, 644421885015611030)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5120139440496431417),
            name: 'chat',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8924721507289376554),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 7464678747347435965),
      name: 'Module',
      lastPropertyId: const obx_int.IdUid(3, 872515323232936425),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3813044977169349850),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3316567608308923226),
            name: 'key',
            type: 9,
            flags: 32808,
            indexId: const obx_int.IdUid(4, 7044924610171394896)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 872515323232936425),
            name: 'value',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(5, 7464678747347435965),
      lastIndexId: const obx_int.IdUid(4, 7044924610171394896),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Api: obx_int.EntityDefinition<Api>(
        model: _entities[0],
        toOneRelations: (Api object) => [],
        toManyRelations: (Api object) => {},
        getId: (Api object) => object.id,
        setId: (Api object, int id) {
          object.id = id;
        },
        objectToFB: (Api object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final urlOffset = fbb.writeString(object.url);
          final keyOffset = fbb.writeString(object.key);
          final typeOffset =
              object.type == null ? null : fbb.writeString(object.type!);
          final modelsOffset = fbb.writeList(
              object.models.map(fbb.writeString).toList(growable: false));
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, urlOffset);
          fbb.addOffset(3, keyOffset);
          fbb.addOffset(4, typeOffset);
          fbb.addOffset(5, modelsOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final urlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final keyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final modelsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 14, []);
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final object = Api(
              url: urlParam,
              key: keyParam,
              name: nameParam,
              models: modelsParam,
              type: typeParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Bot: obx_int.EntityDefinition<Bot>(
        model: _entities[1],
        toOneRelations: (Bot object) => [],
        toManyRelations: (Bot object) => {},
        getId: (Bot object) => object.id,
        setId: (Bot object, int id) {
          object.id = id;
        },
        objectToFB: (Bot object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final systemPromptsOffset = object.systemPrompts == null
              ? null
              : fbb.writeString(object.systemPrompts!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addBool(2, object.stream);
          fbb.addInt64(3, object.maxTokens);
          fbb.addFloat64(4, object.temperature);
          fbb.addOffset(5, systemPromptsOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final streamParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 8);
          final maxTokensParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final temperatureParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 12);
          final systemPromptsParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final object = Bot(
              name: nameParam,
              stream: streamParam,
              maxTokens: maxTokensParam,
              temperature: temperatureParam,
              systemPrompts: systemPromptsParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Chat: obx_int.EntityDefinition<Chat>(
        model: _entities[2],
        toOneRelations: (Chat object) => [],
        toManyRelations: (Chat object) => {},
        getId: (Chat object) => object.id,
        setId: (Chat object, int id) {
          object.id = id;
        },
        objectToFB: (Chat object, fb.Builder fbb) {
          final coreOffset = fbb.writeString(object.core);
          final titleOffset = fbb.writeString(object.title);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, coreOffset);
          fbb.addOffset(2, titleOffset);
          fbb.addInt64(3, object.time.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final coreParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final timeParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object = Chat(
              core: coreParam, time: timeParam, title: titleParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Model: obx_int.EntityDefinition<Model>(
        model: _entities[3],
        toOneRelations: (Model object) => [],
        toManyRelations: (Model object) => {},
        getId: (Model object) => object.id,
        setId: (Model object, int id) {
          object.id = id;
        },
        objectToFB: (Model object, fb.Builder fbb) {
          final midOffset = fbb.writeString(object.mid);
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, midOffset);
          fbb.addBool(2, object.chat);
          fbb.addOffset(3, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final midParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final chatParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final object = Model(mid: midParam, chat: chatParam, name: nameParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Module: obx_int.EntityDefinition<Module>(
        model: _entities[4],
        toOneRelations: (Module object) => [],
        toManyRelations: (Module object) => {},
        getId: (Module object) => object.id,
        setId: (Module object, int id) {
          object.id = id;
        },
        objectToFB: (Module object, fb.Builder fbb) {
          final keyOffset = fbb.writeString(object.key);
          final valueOffset = fbb.writeString(object.value);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, keyOffset);
          fbb.addOffset(2, valueOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final keyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final valueParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object = Module(key: keyParam, value: valueParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Api] entity fields to define ObjectBox queries.
class Api_ {
  /// See [Api.id].
  static final id = obx.QueryIntegerProperty<Api>(_entities[0].properties[0]);

  /// See [Api.name].
  static final name = obx.QueryStringProperty<Api>(_entities[0].properties[1]);

  /// See [Api.url].
  static final url = obx.QueryStringProperty<Api>(_entities[0].properties[2]);

  /// See [Api.key].
  static final key = obx.QueryStringProperty<Api>(_entities[0].properties[3]);

  /// See [Api.type].
  static final type = obx.QueryStringProperty<Api>(_entities[0].properties[4]);

  /// See [Api.models].
  static final models =
      obx.QueryStringVectorProperty<Api>(_entities[0].properties[5]);
}

/// [Bot] entity fields to define ObjectBox queries.
class Bot_ {
  /// See [Bot.id].
  static final id = obx.QueryIntegerProperty<Bot>(_entities[1].properties[0]);

  /// See [Bot.name].
  static final name = obx.QueryStringProperty<Bot>(_entities[1].properties[1]);

  /// See [Bot.stream].
  static final stream =
      obx.QueryBooleanProperty<Bot>(_entities[1].properties[2]);

  /// See [Bot.maxTokens].
  static final maxTokens =
      obx.QueryIntegerProperty<Bot>(_entities[1].properties[3]);

  /// See [Bot.temperature].
  static final temperature =
      obx.QueryDoubleProperty<Bot>(_entities[1].properties[4]);

  /// See [Bot.systemPrompts].
  static final systemPrompts =
      obx.QueryStringProperty<Bot>(_entities[1].properties[5]);
}

/// [Chat] entity fields to define ObjectBox queries.
class Chat_ {
  /// See [Chat.id].
  static final id = obx.QueryIntegerProperty<Chat>(_entities[2].properties[0]);

  /// See [Chat.core].
  static final core = obx.QueryStringProperty<Chat>(_entities[2].properties[1]);

  /// See [Chat.title].
  static final title =
      obx.QueryStringProperty<Chat>(_entities[2].properties[2]);

  /// See [Chat.time].
  static final time = obx.QueryDateProperty<Chat>(_entities[2].properties[3]);
}

/// [Model] entity fields to define ObjectBox queries.
class Model_ {
  /// See [Model.id].
  static final id = obx.QueryIntegerProperty<Model>(_entities[3].properties[0]);

  /// See [Model.mid].
  static final mid = obx.QueryStringProperty<Model>(_entities[3].properties[1]);

  /// See [Model.chat].
  static final chat =
      obx.QueryBooleanProperty<Model>(_entities[3].properties[2]);

  /// See [Model.name].
  static final name =
      obx.QueryStringProperty<Model>(_entities[3].properties[3]);
}

/// [Module] entity fields to define ObjectBox queries.
class Module_ {
  /// See [Module.id].
  static final id =
      obx.QueryIntegerProperty<Module>(_entities[4].properties[0]);

  /// See [Module.key].
  static final key =
      obx.QueryStringProperty<Module>(_entities[4].properties[1]);

  /// See [Module.value].
  static final value =
      obx.QueryStringProperty<Module>(_entities[4].properties[2]);
}
